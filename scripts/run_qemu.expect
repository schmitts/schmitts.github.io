#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Oct 21 13:45:18 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn make qemu
match_max 100000
expect -exact "qemu-system-riscv64 -machine virt -bios none -kernel kernel/kernel -m 128M -smp 3 -nographic -global virtio-mmio.force-legacy=false -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0\r
\r
xv6 kernel is booting\r
\r
hart 1 starting\r
hart 2 starting\r
init: starting sh\r
\$ "
send -- "ls\r"
expect -exact "ls\r
.              1 1 1024\r
..             1 1 1024\r
README         2 2 2403\r
xargstest.sh   2 3 93\r
cat            2 4 34200\r
echo           2 5 33096\r
forktest       2 6 16256\r
grep           2 7 37472\r
init           2 8 33584\r
kill           2 9 33032\r
ln             2 10 32856\r
ls             2 11 40304\r
mkdir          2 12 33096\r
rm             2 13 33080\r
sh             2 14 54672\r
stressfs       2 15 33976\r
usertests      2 16 179504\r
grind          2 17 49104\r
wc             2 18 35080\r
zombie         2 19 32456\r
console        3 20 0\r
\$ "
send -- "x"
expect eof
